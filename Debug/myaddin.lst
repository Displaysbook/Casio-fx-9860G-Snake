SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         21-Jul-2024 14:15:10  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Documents and Settings\Administrator\Desktop\myaddin\myaddin\myaddin.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

            myaddin.c          1    #include "fxlib.h"
            myaddin.c          2    #include <stdlib.h>
            myaddin.c          3    #include <stdio.h>
            myaddin.c          4    
            myaddin.c          5    #define WIDTH  21
            myaddin.c          6    #define HEIGHT 8
            myaddin.c          7    #define SNAKE_MAX_LENGTH 50
            myaddin.c          8    
            myaddin.c          9    #define UP    0
            myaddin.c         10    #define DOWN  1
            myaddin.c         11    #define LEFT  2
            myaddin.c         12    #define RIGHT 3
            myaddin.c         13    
            myaddin.c         14    typedef struct {
            myaddin.c         15        int x;
            myaddin.c         16        int y;
            myaddin.c         17    } Point;
            myaddin.c         18    
            myaddin.c         19    Point snake[SNAKE_MAX_LENGTH];
            myaddin.c         20    int snake_length = 5;
            myaddin.c         21    int direction = RIGHT;
            myaddin.c         22    
            myaddin.c         23    Point food;
            myaddin.c         24    int food_exists = 0;
            myaddin.c         25    
            myaddin.c         26    void InitializeGame();
            myaddin.c         27    void Draw();
            myaddin.c         28    void Update();
            myaddin.c         29    void PlaceFood();
            myaddin.c         30    int CheckCollision();
            myaddin.c         31    void GameOver();
            myaddin.c         32    
            myaddin.c         33    
            myaddin.c         34    #define GETCODE(c1,c2) (gcode1=(c1),gcode2=(c2))
            myaddin.c         35    int Bkey_n_IsKeyDown(int keycode) {
P   00000000              _Bkey_n_IsKeyDown:               ; function: Bkey_n_IsKeyDown
                                                           ; frame size=32
    00000000 2FD6                   MOV.L       R13,@-R15
    00000002 2FE6                   MOV.L       R14,@-R15
    00000004 4F22                   STS.L       PR,@-R15
    00000006 7FF4                   ADD         #-12,R15
            myaddin.c         36        int kcode1 = 0, kcode2 = 0;
            myaddin.c         37        int gcode1, gcode2;
            myaddin.c         38        short unused = 0;
            myaddin.c         39    
            myaddin.c         40        switch(keycode) {
    00000008 E275                   MOV         #117,R2    ; H'00000075
    0000000A 4218                   SHLL8       R2
    0000000C 7242                   ADD         #66,R2
    0000000E 3420                   CMP/EQ      R2,R4
    00000010 E100                   MOV         #0,R1      ; H'00000000
    00000012 1F12                   MOV.L       R1,@(8,R15); kcode1
    00000014 1F11                   MOV.L       R1,@(4,R15); kcode2
    00000016 8D0B                   BT/S        L18
    00000018 2F11                   MOV.W       R1,@R15    ; unused
    0000001A 7205                   ADD         #5,R2
    0000001C 3420                   CMP/EQ      R2,R4
    0000001E 890A                   BT          L20
    00000020 72FD                   ADD         #-3,R2
    00000022 3420                   CMP/EQ      R2,R4
    00000024 890A                   BT          L22
    00000026 7201                   ADD         #1,R2
    00000028 3420                   CMP/EQ      R2,R4
    0000002A 890A                   BT          L23
    0000002C A020                   BRA         L24
    0000002E 0009                   NOP
    00000030              L18:
            myaddin.c         41            case KEY_CTRL_UP: GETCODE(2,9); break;
    00000030 EE02                   MOV         #2,R14     ; H'00000002
    00000032 A008                   BRA         L25
    00000034 ED09                   MOV         #9,R13     ; H'00000009
    00000036              L20:
            myaddin.c         42            case KEY_CTRL_DOWN: GETCODE(3,8); break;
    00000036 EE03                   MOV         #3,R14     ; H'00000003
    00000038 A005                   BRA         L25
    0000003A ED08                   MOV         #8,R13     ; H'00000008
    0000003C              L22:
            myaddin.c         43            case KEY_CTRL_LEFT: GETCODE(3,9); break;
    0000003C EE03                   MOV         #3,R14     ; H'00000003
    0000003E A002                   BRA         L25
    00000040 ED09                   MOV         #9,R13     ; H'00000009
    00000042              L23:
            myaddin.c         44            case KEY_CTRL_RIGHT: GETCODE(2,8); break;
    00000042 EE02                   MOV         #2,R14     ; H'00000002
    00000044 ED08                   MOV         #8,R13     ; H'00000008
    00000046              L25:
            myaddin.c         45            default: return 0;
            myaddin.c         46        }
            myaddin.c         47    
            myaddin.c         48        if (Bkey_GetKeyWait(&kcode1, &kcode2, KEYWAIT_HALTOFF_TIMEROFF, 0, 0, &unused) == KEYREP_KEYEVENT) {
    00000046 64F3                   MOV         R15,R4
    00000048 2F46                   MOV.L       R4,@-R15
    0000004A E500                   MOV         #0,R5      ; H'00000000
    0000004C 2F56                   MOV.L       R5,@-R15
    0000004E 65F3                   MOV         R15,R5
    00000050 64F3                   MOV         R15,R4
    00000052 D178                   MOV.L       L163+2,R1  ; _Bkey_GetKeyWait
    00000054 750C                   ADD         #12,R5
    00000056 7410                   ADD         #16,R4
    00000058 E700                   MOV         #0,R7      ; H'00000000
    0000005A 410B                   JSR         @R1
    0000005C E601                   MOV         #1,R6      ; H'00000001
    0000005E 8801                   CMP/EQ      #1,R0
    00000060 8F06                   BF/S        L24
    00000062 7F08                   ADD         #8,R15
            myaddin.c         49            if ((kcode1 == gcode1) && (kcode2 == gcode2)) {
    00000064 52F2                   MOV.L       @(8,R15),R2; kcode1
    00000066 32E0                   CMP/EQ      R14,R2
    00000068 8B02                   BF          L24
    0000006A 52F1                   MOV.L       @(4,R15),R2; kcode2
    0000006C 32D0                   CMP/EQ      R13,R2
    0000006E 8BFF                   BF          L24
    00000070              L24:
    00000070 0029                   MOVT        R0
    00000072 7F0C                   ADD         #12,R15
    00000074 4F26                   LDS.L       @R15+,PR
    00000076 6EF6                   MOV.L       @R15+,R14
            myaddin.c         50                return 1;
            myaddin.c         51            }
            myaddin.c         52        }
            myaddin.c         53    
            myaddin.c         54        return 0;
            myaddin.c         55    }
    00000078 000B                   RTS
    0000007A 6DF6                   MOV.L       @R15+,R13
            myaddin.c         56    
            myaddin.c         57    int AddIn_main(int isAppli, unsigned short OptionNum) {
    0000007C              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=32
    0000007C 2F86                   MOV.L       R8,@-R15
    0000007E 2F96                   MOV.L       R9,@-R15
    00000080 2FA6                   MOV.L       R10,@-R15
    00000082 2FB6                   MOV.L       R11,@-R15
    00000084 2FC6                   MOV.L       R12,@-R15
    00000086 2FD6                   MOV.L       R13,@-R15
    00000088 2FE6                   MOV.L       R14,@-R15
    0000008A 4F22                   STS.L       PR,@-R15
            myaddin.c         58        unsigned int key;
            myaddin.c         59    
            myaddin.c         60        Bdisp_AllClr_DDVRAM();
    0000008C D26A                   MOV.L       L163+6,R2  ; _Bdisp_AllClr_DDVRAM
    0000008E DE6B                   MOV.L       L163+10,R14; _snake_length
    00000090 420B                   JSR         @R2
    00000092 0009                   NOP
    00000094 66E2                   MOV.L       @R14,R6    ; snake_length
    00000096 6763                   MOV         R6,R7
    00000098 77FF                   ADD         #-1,R7
    0000009A 3677                   CMP/GT      R7,R6
    0000009C 8F1D                   BF/S        L30
    0000009E E100                   MOV         #0,R1      ; H'00000000
    000000A0 4715                   CMP/PL      R7
    000000A2 8B0D                   BF          L32
    000000A4 E409                   MOV         #9,R4      ; H'00000009
    000000A6 E50A                   MOV         #10,R5     ; H'0000000A
    000000A8 D265                   MOV.L       L163+14,R2 ; _snake
    000000AA EE04                   MOV         #4,R14     ; H'00000004
    000000AC              L33:
    000000AC 7102                   ADD         #2,R1
    000000AE 3173                   CMP/GE      R7,R1
    000000B0 2252                   MOV.L       R5,@R2     ; snake[].x
    000000B2 12E1                   MOV.L       R14,@(4,R2); snake[].y
    000000B4 1242                   MOV.L       R4,@(8,R2) ; snake[].x
    000000B6 12E3                   MOV.L       R14,@(12,R2); snake[].y
    000000B8 75FE                   ADD         #-2,R5
    000000BA 7210                   ADD         #16,R2
    000000BC 8FF6                   BF/S        L33
    000000BE 74FE                   ADD         #-2,R4
    000000C0              L32:
    000000C0 3163                   CMP/GE      R6,R1
    000000C2 DC5F                   MOV.L       L163+14,R12; _snake
    000000C4 8915                   BT          L35
    000000C6 6613                   MOV         R1,R6
    000000C8 4608                   SHLL2       R6
    000000CA 4600                   SHLL        R6
    000000CC E20A                   MOV         #10,R2     ; H'0000000A
    000000CE 36CC                   ADD         R12,R6
    000000D0 3218                   SUB         R1,R2
    000000D2 EE04                   MOV         #4,R14     ; H'00000004
    000000D4 2622                   MOV.L       R2,@R6     ; snake[].x
    000000D6 A00C                   BRA         L35
    000000D8 16E1                   MOV.L       R14,@(4,R6); snake[].y
    000000DA              L30:
    000000DA 4615                   CMP/PL      R6
    000000DC 8B08                   BF          L37
    000000DE E50A                   MOV         #10,R5     ; H'0000000A
    000000E0 D257                   MOV.L       L163+14,R2 ; _snake
    000000E2 EE04                   MOV         #4,R14     ; H'00000004
    000000E4              L38:
    000000E4 4610                   DT          R6
    000000E6 2252                   MOV.L       R5,@R2     ; snake[].x
    000000E8 12E1                   MOV.L       R14,@(4,R2); snake[].y
    000000EA 75FF                   ADD         #-1,R5
    000000EC 8FFA                   BF/S        L38
    000000EE 7208                   ADD         #8,R2
    000000F0              L37:
    000000F0 DC53                   MOV.L       L163+14,R12; _snake
    000000F2              L35:
    000000F2 DE54                   MOV.L       L163+18,R14; _direction
    000000F4 D654                   MOV.L       L163+22,R6 ; _food_exists
    000000F6 E103                   MOV         #3,R1      ; H'00000003
    000000F8 E400                   MOV         #0,R4      ; H'00000000
    000000FA 2E12                   MOV.L       R1,@R14    ; direction
            myaddin.c         61        InitializeGame();
            myaddin.c         62        Draw();
    000000FC B0E8                   BSR         _Draw
    000000FE 2642                   MOV.L       R4,@R6     ; food_exists
    00000100 EB75                   MOV         #117,R11   ; H'00000075
    00000102 E875                   MOV         #117,R8    ; H'00000075
    00000104 E975                   MOV         #117,R9    ; H'00000075
    00000106 EA75                   MOV         #117,R10   ; H'00000075
    00000108 6DC3                   MOV         R12,R13
    0000010A 4B18                   SHLL8       R11
    0000010C 4818                   SHLL8       R8
    0000010E 4918                   SHLL8       R9
    00000110 4A18                   SHLL8       R10
    00000112 7D04                   ADD         #4,R13
    00000114 7B42                   ADD         #66,R11
    00000116 7847                   ADD         #71,R8
    00000118 7944                   ADD         #68,R9
    0000011A 7A45                   ADD         #69,R10
    0000011C              L39:
            myaddin.c         63    
            myaddin.c         64        while (1) {
            myaddin.c         65            // Check for key press and update direction accordingly
            myaddin.c         66            if (Bkey_n_IsKeyDown(KEY_CTRL_UP) && direction != DOWN) direction = UP;
    0000011C BF70                   BSR         _Bkey_n_IsKeyDown
    0000011E 64B3                   MOV         R11,R4
    00000120 2008                   TST         R0,R0
    00000122 8905                   BT          L41
    00000124 DE47                   MOV.L       L163+18,R14; _direction
    00000126 60E2                   MOV.L       @R14,R0    ; direction
    00000128 8801                   CMP/EQ      #1,R0
    0000012A 8901                   BT          L41
    0000012C E200                   MOV         #0,R2      ; H'00000000
    0000012E 2E22                   MOV.L       R2,@R14    ; direction
    00000130              L41:
            myaddin.c         67            if (Bkey_n_IsKeyDown(KEY_CTRL_DOWN) && direction != UP) direction = DOWN;
    00000130 BF66                   BSR         _Bkey_n_IsKeyDown
    00000132 6483                   MOV         R8,R4
    00000134 2008                   TST         R0,R0
    00000136 8905                   BT          L44
    00000138 DE42                   MOV.L       L163+18,R14; _direction
    0000013A 62E2                   MOV.L       @R14,R2    ; direction
    0000013C 2228                   TST         R2,R2
    0000013E 8901                   BT          L44
    00000140 E201                   MOV         #1,R2      ; H'00000001
    00000142 2E22                   MOV.L       R2,@R14    ; direction
    00000144              L44:
            myaddin.c         68            if (Bkey_n_IsKeyDown(KEY_CTRL_LEFT) && direction != RIGHT) direction = LEFT;
    00000144 BF5C                   BSR         _Bkey_n_IsKeyDown
    00000146 6493                   MOV         R9,R4
    00000148 2008                   TST         R0,R0
    0000014A 8905                   BT          L47
    0000014C DE3D                   MOV.L       L163+18,R14; _direction
    0000014E 60E2                   MOV.L       @R14,R0    ; direction
    00000150 8803                   CMP/EQ      #3,R0
    00000152 8901                   BT          L47
    00000154 E202                   MOV         #2,R2      ; H'00000002
    00000156 2E22                   MOV.L       R2,@R14    ; direction
    00000158              L47:
            myaddin.c         69            if (Bkey_n_IsKeyDown(KEY_CTRL_RIGHT) && direction != LEFT) direction = RIGHT;
    00000158 BF52                   BSR         _Bkey_n_IsKeyDown
    0000015A 64A3                   MOV         R10,R4
    0000015C 2008                   TST         R0,R0
    0000015E 8905                   BT          L50
    00000160 DE38                   MOV.L       L163+18,R14; _direction
    00000162 60E2                   MOV.L       @R14,R0    ; direction
    00000164 8802                   CMP/EQ      #2,R0
    00000166 8901                   BT          L50
    00000168 E203                   MOV         #3,R2      ; H'00000003
    0000016A 2E22                   MOV.L       R2,@R14    ; direction
    0000016C              L50:
            myaddin.c         70    
            myaddin.c         71            Update();
    0000016C B0E7                   BSR         _Update
    0000016E 0009                   NOP
    00000170 DE32                   MOV.L       L163+10,R14; _snake_length
            myaddin.c         72            Draw();
    00000172 B0AD                   BSR         _Draw
    00000174 0009                   NOP
    00000176 67E2                   MOV.L       @R14,R7    ; snake_length
    00000178 6473                   MOV         R7,R4
    0000017A 74FF                   ADD         #-1,R4
    0000017C 3747                   CMP/GT      R4,R7
    0000017E 8F25                   BF/S        L53
    00000180 E501                   MOV         #1,R5      ; H'00000001
    00000182 3457                   CMP/GT      R5,R4
    00000184 8B13                   BF          L55
    00000186 66C3                   MOV         R12,R6
    00000188 7608                   ADD         #8,R6
    0000018A 61C2                   MOV.L       @R12,R1    ; snake[].x
    0000018C 6ED2                   MOV.L       @R13,R14   ; snake[].y
    0000018E              L56:
    0000018E 6262                   MOV.L       @R6,R2     ; snake[].x
    00000190 3120                   CMP/EQ      R2,R1
    00000192 8B02                   BF          L58
    00000194 5261                   MOV.L       @(4,R6),R2 ; snake[].y
    00000196 3E20                   CMP/EQ      R2,R14
    00000198 892E                   BT          L59
    0000019A              L58:
    0000019A 5262                   MOV.L       @(8,R6),R2 ; snake[].x
    0000019C 3120                   CMP/EQ      R2,R1
    0000019E 8B02                   BF          L61
    000001A0 5263                   MOV.L       @(12,R6),R2; snake[].y
    000001A2 3E20                   CMP/EQ      R2,R14
    000001A4 8928                   BT          L59
    000001A6              L61:
    000001A6 7502                   ADD         #2,R5
    000001A8 3543                   CMP/GE      R4,R5
    000001AA 8FF0                   BF/S        L56
    000001AC 7610                   ADD         #16,R6
    000001AE              L55:
    000001AE 3573                   CMP/GE      R7,R5
    000001B0 891C                   BT          L63
    000001B2 4508                   SHLL2       R5
    000001B4 4500                   SHLL        R5
    000001B6 6053                   MOV         R5,R0
    000001B8 66C2                   MOV.L       @R12,R6    ; snake[].x
    000001BA 02CE                   MOV.L       @(R0,R12),R2; snake[].x
    000001BC 3620                   CMP/EQ      R2,R6
    000001BE 8B15                   BF          L63
    000001C0 66D2                   MOV.L       @R13,R6    ; snake[].y
    000001C2 02DE                   MOV.L       @(R0,R13),R2; snake[].y
    000001C4 3620                   CMP/EQ      R2,R6
    000001C6 8917                   BT          L59
    000001C8 A010                   BRA         L63
    000001CA 0009                   NOP
    000001CC              L53:
    000001CC 3757                   CMP/GT      R5,R7
    000001CE 8B0D                   BF          L63
    000001D0 66C3                   MOV         R12,R6
    000001D2 7608                   ADD         #8,R6
    000001D4 64C2                   MOV.L       @R12,R4    ; snake[].x
    000001D6 61D2                   MOV.L       @R13,R1    ; snake[].y
    000001D8              L66:
    000001D8 6262                   MOV.L       @R6,R2     ; snake[].x
    000001DA 3420                   CMP/EQ      R2,R4
    000001DC 8B02                   BF          L68
    000001DE 5261                   MOV.L       @(4,R6),R2 ; snake[].y
    000001E0 3120                   CMP/EQ      R2,R1
    000001E2 8909                   BT          L59
    000001E4              L68:
    000001E4 7501                   ADD         #1,R5
    000001E6 3573                   CMP/GE      R7,R5
    000001E8 8FF6                   BF/S        L66
    000001EA 7608                   ADD         #8,R6
    000001EC              L63:
            myaddin.c         73            if (CheckCollision()) {
            myaddin.c         74                GameOver();
            myaddin.c         75                break;
            myaddin.c         76            }
            myaddin.c         77            Sleep(200); // Delay for game speed control
    000001EC D217                   MOV.L       L163+26,R2 ; _Sleep
    000001EE E4C8                   MOV         #-56,R4    ; H'FFFFFFC8
    000001F0 420B                   JSR         @R2
    000001F2 644C                   EXTU.B      R4,R4
    000001F4 AF92                   BRA         L39
    000001F6 0009                   NOP
    000001F8              L59:
    000001F8 D50F                   MOV.L       L163+6,R5  ; _Bdisp_AllClr_DDVRAM
    000001FA D815                   MOV.L       L163+30,R8 ; _Bdisp_PutDisp_DD
    000001FC 450B                   JSR         @R5
    000001FE 0009                   NOP
    00000200 D614                   MOV.L       L163+34,R6 ; _locate
    00000202 E504                   MOV         #4,R5      ; H'00000004
    00000204 460B                   JSR         @R6
    00000206 E405                   MOV         #5,R4      ; H'00000005
    00000208 D413                   MOV.L       L163+38,R4 ; L167
    0000020A D714                   MOV.L       L163+42,R7 ; _Print
    0000020C D90F                   MOV.L       L163+26,R9 ; _Sleep
    0000020E 470B                   JSR         @R7
    00000210 0009                   NOP
    00000212 480B                   JSR         @R8
    00000214 0009                   NOP
    00000216 E408                   MOV         #8,R4      ; H'00000008
    00000218 4418                   SHLL8       R4
    0000021A 490B                   JSR         @R9
    0000021C 74D0                   ADD         #-48,R4
            myaddin.c         78        }
            myaddin.c         79    
            myaddin.c         80        return 1;
    0000021E E001                   MOV         #1,R0      ; H'00000001
    00000220 4F26                   LDS.L       @R15+,PR
    00000222 6EF6                   MOV.L       @R15+,R14
    00000224 6DF6                   MOV.L       @R15+,R13
    00000226 6CF6                   MOV.L       @R15+,R12
    00000228 6BF6                   MOV.L       @R15+,R11
    0000022A 6AF6                   MOV.L       @R15+,R10
    0000022C 69F6                   MOV.L       @R15+,R9
            myaddin.c         81    }
    0000022E 000B                   RTS
    00000230 68F6                   MOV.L       @R15+,R8
    00000232              L163:
    00000232 00000002               .RES.W      1
    00000234 <00000000>             .DATA.L     _Bkey_GetKeyWait
    00000238 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000023C <00000000>             .DATA.L     _snake_length
    00000240 <00000000>             .DATA.L     _snake
    00000244 <00000000>             .DATA.L     _direction
    00000248 <00000000>             .DATA.L     _food_exists
    0000024C <00000000>             .DATA.L     _Sleep
    00000250 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000254 <00000000>             .DATA.L     _locate
    00000258 <00000000>             .DATA.L     L167
    0000025C <00000000>             .DATA.L     _Print
            myaddin.c         82    
            myaddin.c         83    void InitializeGame() {
    00000260              _InitializeGame:                 ; function: InitializeGame
                                                           ; frame size=4
    00000260 2FE6                   MOV.L       R14,@-R15
    00000262 D29C                   MOV.L       L164+2,R2  ; _snake_length
    00000264 6622                   MOV.L       @R2,R6     ; snake_length
    00000266 6763                   MOV         R6,R7
    00000268 77FF                   ADD         #-1,R7
    0000026A 3677                   CMP/GT      R7,R6
    0000026C 8F1D                   BF/S        L71
    0000026E E100                   MOV         #0,R1      ; H'00000000
            myaddin.c         84        int i;
            myaddin.c         85        for (i = 0; i < snake_length; ++i) {
    00000270 4715                   CMP/PL      R7
    00000272 8B0D                   BF          L73
    00000274 E409                   MOV         #9,R4      ; H'00000009
    00000276 E50A                   MOV         #10,R5     ; H'0000000A
    00000278 D297                   MOV.L       L164+6,R2  ; _snake
    0000027A EE04                   MOV         #4,R14     ; H'00000004
    0000027C              L74:
    0000027C 7102                   ADD         #2,R1
    0000027E 3173                   CMP/GE      R7,R1
    00000280 2252                   MOV.L       R5,@R2     ; snake[].x
    00000282 12E1                   MOV.L       R14,@(4,R2); snake[].y
            myaddin.c         86            snake[i].x = WIDTH / 2 - i;
    00000284 1242                   MOV.L       R4,@(8,R2) ; snake[].x
            myaddin.c         87            snake[i].y = HEIGHT / 2;
    00000286 12E3                   MOV.L       R14,@(12,R2); snake[].y
    00000288 75FE                   ADD         #-2,R5
    0000028A 7210                   ADD         #16,R2
    0000028C 8FF6                   BF/S        L74
    0000028E 74FE                   ADD         #-2,R4
    00000290              L73:
    00000290 3163                   CMP/GE      R6,R1
    00000292 8915                   BT          L76
    00000294 6613                   MOV         R1,R6
    00000296 4608                   SHLL2       R6
    00000298 D58F                   MOV.L       L164+6,R5  ; _snake
    0000029A 4600                   SHLL        R6
    0000029C E20A                   MOV         #10,R2     ; H'0000000A
    0000029E 365C                   ADD         R5,R6
    000002A0 3218                   SUB         R1,R2
    000002A2 EE04                   MOV         #4,R14     ; H'00000004
    000002A4 2622                   MOV.L       R2,@R6     ; snake[].x
    000002A6 A00B                   BRA         L76
    000002A8 16E1                   MOV.L       R14,@(4,R6); snake[].y
    000002AA              L71:
    000002AA 4615                   CMP/PL      R6
    000002AC 8B08                   BF          L76
    000002AE E50A                   MOV         #10,R5     ; H'0000000A
    000002B0 D289                   MOV.L       L164+6,R2  ; _snake
    000002B2 EE04                   MOV         #4,R14     ; H'00000004
    000002B4              L78:
    000002B4 4610                   DT          R6
    000002B6 2252                   MOV.L       R5,@R2     ; snake[].x
    000002B8 12E1                   MOV.L       R14,@(4,R2); snake[].y
    000002BA 75FF                   ADD         #-1,R5
    000002BC 8FFA                   BF/S        L78
    000002BE 7208                   ADD         #8,R2
    000002C0              L76:
    000002C0 D586                   MOV.L       L164+10,R5 ; _direction
    000002C2 D787                   MOV.L       L164+14,R7 ; _food_exists
            myaddin.c         88        }
            myaddin.c         89        direction = RIGHT;
    000002C4 E103                   MOV         #3,R1      ; H'00000003
            myaddin.c         90        food_exists = 0;
    000002C6 E400                   MOV         #0,R4      ; H'00000000
    000002C8 2512                   MOV.L       R1,@R5     ; direction
    000002CA 2742                   MOV.L       R4,@R7     ; food_exists
            myaddin.c         91    }
    000002CC 000B                   RTS
    000002CE 6EF6                   MOV.L       @R15+,R14
            myaddin.c         92    
            myaddin.c         93    void Draw() {
    000002D0              _Draw:                           ; function: Draw
                                                           ; frame size=28
    000002D0 2F96                   MOV.L       R9,@-R15
    000002D2 2FA6                   MOV.L       R10,@-R15
    000002D4 2FB6                   MOV.L       R11,@-R15
    000002D6 2FC6                   MOV.L       R12,@-R15
    000002D8 2FD6                   MOV.L       R13,@-R15
    000002DA 2FE6                   MOV.L       R14,@-R15
    000002DC 4F22                   STS.L       PR,@-R15
            myaddin.c         94        int i;
            myaddin.c         95        Bdisp_AllClr_DDVRAM();
    000002DE D181                   MOV.L       L164+18,R1 ; _Bdisp_AllClr_DDVRAM
            myaddin.c         96    
            myaddin.c         97        for (i = 0; i < snake_length; ++i) {
    000002E0 D97C                   MOV.L       L164+2,R9  ; _snake_length
    000002E2 410B                   JSR         @R1
    000002E4 0009                   NOP
    000002E6 6492                   MOV.L       @R9,R4     ; snake_length
    000002E8 4415                   CMP/PL      R4
    000002EA 8F10                   BF/S        L81
    000002EC ED00                   MOV         #0,R13     ; H'00000000
    000002EE DE7A                   MOV.L       L164+6,R14 ; _snake
    000002F0 DA7D                   MOV.L       L164+22,R10; _locate
    000002F2 DB7E                   MOV.L       L164+26,R11; L168
    000002F4 DC7E                   MOV.L       L164+30,R12; _Print
    000002F6              L82:
            myaddin.c         98            locate(snake[i].x + 1, snake[i].y + 1);
    000002F6 55E1                   MOV.L       @(4,R14),R5; snake[].y
    000002F8 64E2                   MOV.L       @R14,R4    ; snake[].x
    000002FA 7501                   ADD         #1,R5
    000002FC 4A0B                   JSR         @R10
    000002FE 7401                   ADD         #1,R4
            myaddin.c         99            Print((unsigned char *)"*");
    00000300 4C0B                   JSR         @R12
    00000302 64B3                   MOV         R11,R4
    00000304 6292                   MOV.L       @R9,R2     ; snake_length
    00000306 7D01                   ADD         #1,R13
    00000308 3D23                   CMP/GE      R2,R13
    0000030A 8FF4                   BF/S        L82
    0000030C 7E08                   ADD         #8,R14
    0000030E              L81:
            myaddin.c        100        }
            myaddin.c        101    
            myaddin.c        102        if (food_exists) {
    0000030E D674                   MOV.L       L164+14,R6 ; _food_exists
    00000310 6262                   MOV.L       @R6,R2     ; food_exists
    00000312 2228                   TST         R2,R2
    00000314 890A                   BT          L84
            myaddin.c        103            locate(food.x + 1, food.y + 1);
    00000316 D977                   MOV.L       L164+34,R9 ; _food
    00000318 D673                   MOV.L       L164+22,R6 ; _locate
    0000031A 5591                   MOV.L       @(4,R9),R5 ; food.y
    0000031C 6492                   MOV.L       @R9,R4     ; food.x
    0000031E 7501                   ADD         #1,R5
    00000320 460B                   JSR         @R6
    00000322 7401                   ADD         #1,R4
            myaddin.c        104            Print((unsigned char *)"#");
    00000324 D474                   MOV.L       L164+38,R4 ; L169
    00000326 D772                   MOV.L       L164+30,R7 ; _Print
    00000328 470B                   JSR         @R7
    0000032A 0009                   NOP
    0000032C              L84:
            myaddin.c        105        }
            myaddin.c        106    
            myaddin.c        107        Bdisp_PutDisp_DD();
    0000032C D273                   MOV.L       L164+42,R2 ; _Bdisp_PutDisp_DD
    0000032E 4F26                   LDS.L       @R15+,PR
    00000330 6EF6                   MOV.L       @R15+,R14
    00000332 6DF6                   MOV.L       @R15+,R13
    00000334 6CF6                   MOV.L       @R15+,R12
    00000336 6BF6                   MOV.L       @R15+,R11
    00000338 6AF6                   MOV.L       @R15+,R10
    0000033A 422B                   JMP         @R2
    0000033C 69F6                   MOV.L       @R15+,R9
            myaddin.c        108    }
            myaddin.c        109    
            myaddin.c        110    void Update() {
    0000033E              _Update:                         ; function: Update
                                                           ; frame size=52
    0000033E 2FA6                   MOV.L       R10,@-R15
    00000340 2FB6                   MOV.L       R11,@-R15
    00000342 2FC6                   MOV.L       R12,@-R15
    00000344 2FD6                   MOV.L       R13,@-R15
    00000346 2FE6                   MOV.L       R14,@-R15
    00000348 4F22                   STS.L       PR,@-R15
    0000034A 7FE4                   ADD         #-28,R15
            myaddin.c        111        int i;
            myaddin.c        112        Point new_head = snake[0];
            myaddin.c        113        switch (direction) {
    0000034C D463                   MOV.L       L164+10,R4 ; _direction
    0000034E DC62                   MOV.L       L164+6,R12 ; _snake
    00000350 6042                   MOV.L       @R4,R0     ; direction
    00000352 61C2                   MOV.L       @R12,R1    ; snake[]
    00000354 2008                   TST         R0,R0
    00000356 52C1                   MOV.L       @(4,R12),R2; snake[]
    00000358 2F12                   MOV.L       R1,@R15    ; (part of)new_head
    0000035A 8D08                   BT/S        L93
    0000035C 1F21                   MOV.L       R2,@(4,R15); (part of)new_head
    0000035E 8801                   CMP/EQ      #1,R0
    00000360 8909                   BT          L95
    00000362 8802                   CMP/EQ      #2,R0
    00000364 890B                   BT          L97
    00000366 8803                   CMP/EQ      #3,R0
    00000368 890D                   BT          L98
    0000036A A00F                   BRA         L99
    0000036C 0009                   NOP
    0000036E              L93:
            myaddin.c        114            case UP: new_head.y--; break;
    0000036E 52F1                   MOV.L       @(4,R15),R2; new_head.y
    00000370 72FF                   ADD         #-1,R2
    00000372 A00B                   BRA         L99
    00000374 1F21                   MOV.L       R2,@(4,R15); new_head.y
    00000376              L95:
            myaddin.c        115            case DOWN: new_head.y++; break;
    00000376 52F1                   MOV.L       @(4,R15),R2; new_head.y
    00000378 7201                   ADD         #1,R2
    0000037A A007                   BRA         L99
    0000037C 1F21                   MOV.L       R2,@(4,R15); new_head.y
    0000037E              L97:
            myaddin.c        116            case LEFT: new_head.x--; break;
    0000037E 62F2                   MOV.L       @R15,R2    ; new_head.x
    00000380 72FF                   ADD         #-1,R2
    00000382 A003                   BRA         L99
    00000384 2F22                   MOV.L       R2,@R15    ; new_head.x
    00000386              L98:
            myaddin.c        117            case RIGHT: new_head.x++; break;
    00000386 62F2                   MOV.L       @R15,R2    ; new_head.x
    00000388 7201                   ADD         #1,R2
    0000038A 2F22                   MOV.L       R2,@R15    ; new_head.x
    0000038C              L99:
            myaddin.c        118        }
            myaddin.c        119    
            myaddin.c        120        // Handle screen wrapping
            myaddin.c        121        if (new_head.x < 0) new_head.x = WIDTH - 1;
    0000038C 62F2                   MOV.L       @R15,R2    ; new_head.x
    0000038E 4211                   CMP/PZ      R2
    00000390 8B05                   BF          L101
    00000392 E615                   MOV         #21,R6     ; H'00000015
    00000394 3263                   CMP/GE      R6,R2
    00000396 8B04                   BF          L102
            myaddin.c        122        if (new_head.x >= WIDTH) new_head.x = 0;
    00000398 E200                   MOV         #0,R2      ; H'00000000
    0000039A A002                   BRA         L102
    0000039C 2F22                   MOV.L       R2,@R15    ; new_head.x
    0000039E              L101:
    0000039E E214                   MOV         #20,R2     ; H'00000014
    000003A0 2F22                   MOV.L       R2,@R15    ; new_head.x
    000003A2              L102:
            myaddin.c        123        if (new_head.y < 0) new_head.y = HEIGHT - 1;
    000003A2 52F1                   MOV.L       @(4,R15),R2; new_head.y
    000003A4 4211                   CMP/PZ      R2
    000003A6 8B05                   BF          L105
    000003A8 E608                   MOV         #8,R6      ; H'00000008
    000003AA 3263                   CMP/GE      R6,R2
    000003AC 8B04                   BF          L106
            myaddin.c        124        if (new_head.y >= HEIGHT) new_head.y = 0;
    000003AE E200                   MOV         #0,R2      ; H'00000000
    000003B0 A002                   BRA         L106
    000003B2 1F21                   MOV.L       R2,@(4,R15); new_head.y
    000003B4              L105:
    000003B4 E207                   MOV         #7,R2      ; H'00000007
    000003B6 1F21                   MOV.L       R2,@(4,R15); new_head.y
    000003B8              L106:
            myaddin.c        125    
            myaddin.c        126        // Move the snake body
            myaddin.c        127        for (i = snake_length; i > 0; --i) {
    000003B8 DA46                   MOV.L       L164+2,R10 ; _snake_length
    000003BA EB01                   MOV         #1,R11     ; H'00000001
    000003BC 61A2                   MOV.L       @R10,R1    ; snake_length
    000003BE 31B7                   CMP/GT      R11,R1
    000003C0 8B19                   BF          L109
    000003C2 6713                   MOV         R1,R7
    000003C4 4708                   SHLL2       R7
    000003C6 6DC3                   MOV         R12,R13
    000003C8 6EC3                   MOV         R12,R14
    000003CA 4700                   SHLL        R7
    000003CC 7DF8                   ADD         #-8,R13
    000003CE 7EF0                   ADD         #-16,R14
    000003D0              L110:
    000003D0 6473                   MOV         R7,R4
    000003D2 34DC                   ADD         R13,R4
    000003D4 62C3                   MOV         R12,R2
    000003D6 6642                   MOV.L       @R4,R6     ; snake[]
    000003D8 5541                   MOV.L       @(4,R4),R5 ; snake[]
    000003DA 327C                   ADD         R7,R2
    000003DC 2262                   MOV.L       R6,@R2     ; snake[]
    000003DE 1251                   MOV.L       R5,@(4,R2) ; snake[]
            myaddin.c        128            snake[i] = snake[i - 1];
    000003E0 62E3                   MOV         R14,R2
    000003E2 71FE                   ADD         #-2,R1
    000003E4 327C                   ADD         R7,R2
    000003E6 31B7                   CMP/GT      R11,R1
    000003E8 6622                   MOV.L       @R2,R6     ; snake[]
    000003EA 5521                   MOV.L       @(4,R2),R5 ; snake[]
    000003EC 2462                   MOV.L       R6,@R4     ; snake[]
    000003EE 1451                   MOV.L       R5,@(4,R4) ; snake[]
    000003F0 8DEE                   BT/S        L110
    000003F2 77F0                   ADD         #-16,R7
    000003F4 1F46                   MOV.L       R4,@(24,R15)
    000003F6              L109:
    000003F6 4115                   CMP/PL      R1
    000003F8 8B09                   BF          L112
    000003FA 4108                   SHLL2       R1
    000003FC 4100                   SHLL        R1
    000003FE 31CC                   ADD         R12,R1
    00000400 6213                   MOV         R1,R2
    00000402 72F8                   ADD         #-8,R2
    00000404 6522                   MOV.L       @R2,R5     ; snake[]
    00000406 5621                   MOV.L       @(4,R2),R6 ; snake[]
    00000408 2152                   MOV.L       R5,@R1     ; snake[]
    0000040A 1161                   MOV.L       R6,@(4,R1) ; snake[]
    0000040C 1F14                   MOV.L       R1,@(16,R15)
    0000040E              L112:
            myaddin.c        129        }
            myaddin.c        130        snake[0] = new_head;
            myaddin.c        131    
            myaddin.c        132        // Place food if it doesn't exist
            myaddin.c        133        if (!food_exists) {
    0000040E D734                   MOV.L       L164+14,R7 ; _food_exists
    00000410 66F2                   MOV.L       @R15,R6    ; (part of)new_head
    00000412 6B72                   MOV.L       @R7,R11    ; food_exists
    00000414 55F1                   MOV.L       @(4,R15),R5; (part of)new_head
    00000416 2BB8                   TST         R11,R11
    00000418 2C62                   MOV.L       R6,@R12    ; snake[]
    0000041A 8F02                   BF/S        L114
    0000041C 1C51                   MOV.L       R5,@(4,R12); snake[]
            myaddin.c        134            PlaceFood();
    0000041E B02E                   BSR         _PlaceFood
    00000420 0009                   NOP
    00000422              L114:
    00000422 D534                   MOV.L       L164+34,R5 ; _food
            myaddin.c        135        }
            myaddin.c        136    
            myaddin.c        137        // Check if the snake has eaten the food
            myaddin.c        138        if (snake[0].x == food.x && snake[0].y == food.y) {
    00000424 62C2                   MOV.L       @R12,R2    ; snake[].x
    00000426 6652                   MOV.L       @R5,R6     ; food.x
    00000428 3260                   CMP/EQ      R6,R2
    0000042A 8B20                   BF          L116
    0000042C 52C1                   MOV.L       @(4,R12),R2; snake[].y
    0000042E 5651                   MOV.L       @(4,R5),R6 ; food.y
    00000430 3260                   CMP/EQ      R6,R2
    00000432 8B1C                   BF          L116
            myaddin.c        139            Point old_tail = snake[snake_length - 1];
    00000434 64A2                   MOV.L       @R10,R4    ; snake_length
    00000436 7CF8                   ADD         #-8,R12
    00000438 6643                   MOV         R4,R6
    0000043A 4608                   SHLL2       R6
    0000043C 4600                   SHLL        R6
            myaddin.c        140            snake_length++;
    0000043E 7401                   ADD         #1,R4
            myaddin.c        141            if (snake_length < SNAKE_MAX_LENGTH) {
    00000440 E232                   MOV         #50,R2     ; H'00000032
    00000442 1FC5                   MOV.L       R12,@(20,R15)
    00000444 3C6C                   ADD         R6,R12
    00000446 3423                   CMP/GE      R2,R4
    00000448 65C2                   MOV.L       @R12,R5    ; snake[]
    0000044A 5DC1                   MOV.L       @(4,R12),R13; snake[]
    0000044C 1F52                   MOV.L       R5,@(8,R15); (part of)old_tail
    0000044E 1FD3                   MOV.L       R13,@(12,R15); (part of)old_tail
    00000450 8D04                   BT/S        L119
    00000452 2A42                   MOV.L       R4,@R10    ; snake_length
    00000454 D722                   MOV.L       L164+14,R7 ; _food_exists
            myaddin.c        142                food_exists = 0;
    00000456 E200                   MOV         #0,R2      ; H'00000000
            myaddin.c        143                PlaceFood();
    00000458 B011                   BSR         _PlaceFood
    0000045A 2722                   MOV.L       R2,@R7     ; food_exists
    0000045C              L119:
            myaddin.c        144            }
            myaddin.c        145            snake[snake_length - 1] = old_tail;
    0000045C 66A2                   MOV.L       @R10,R6    ; snake_length
    0000045E 51F5                   MOV.L       @(20,R15),R1
    00000460 4608                   SHLL2       R6
    00000462 4600                   SHLL        R6
    00000464 5EF2                   MOV.L       @(8,R15),R14; (part of)old_tail
    00000466 52F3                   MOV.L       @(12,R15),R2; (part of)old_tail
    00000468 316C                   ADD         R6,R1
    0000046A 21E2                   MOV.L       R14,@R1    ; snake[]
    0000046C 1121                   MOV.L       R2,@(4,R1) ; snake[]
    0000046E              L116:
    0000046E 7F1C                   ADD         #28,R15
    00000470 4F26                   LDS.L       @R15+,PR
    00000472 6EF6                   MOV.L       @R15+,R14
    00000474 6DF6                   MOV.L       @R15+,R13
    00000476 6CF6                   MOV.L       @R15+,R12
    00000478 6BF6                   MOV.L       @R15+,R11
            myaddin.c        146        }
            myaddin.c        147    }
    0000047A 000B                   RTS
    0000047C 6AF6                   MOV.L       @R15+,R10
            myaddin.c        148    
            myaddin.c        149    void PlaceFood() {
    0000047E              _PlaceFood:                      ; function: PlaceFood
                                                           ; frame size=40
    0000047E 2F86                   MOV.L       R8,@-R15
    00000480 2F96                   MOV.L       R9,@-R15
    00000482 2FA6                   MOV.L       R10,@-R15
    00000484 2FB6                   MOV.L       R11,@-R15
    00000486 2FC6                   MOV.L       R12,@-R15
    00000488 2FD6                   MOV.L       R13,@-R15
    0000048A 2FE6                   MOV.L       R14,@-R15
    0000048C 4F22                   STS.L       PR,@-R15
    0000048E 4F12                   STS.L       MACL,@-R15
    00000490 4F02                   STS.L       MACH,@-R15
    00000492 DB11                   MOV.L       L164+6,R11 ; _snake
    00000494 DC1A                   MOV.L       L164+46,R12; _rand
    00000496 6DB3                   MOV         R11,R13
    00000498 7D04                   ADD         #4,R13
    0000049A DA1A                   MOV.L       L164+50,R10; H'30C30C31
    0000049C E915                   MOV         #21,R9     ; H'00000015
    0000049E D815                   MOV.L       L164+34,R8 ; _food
    000004A0              L122:
            myaddin.c        150        int i, valid;
            myaddin.c        151        do {
            myaddin.c        152            valid = 1;
            myaddin.c        153            food.x = rand() % WIDTH;
    000004A0 4C0B                   JSR         @R12
    000004A2 0009                   NOP
    000004A4 3A0D                   DMULS.L     R0,R10
    000004A6 6503                   MOV         R0,R5
    000004A8 060A                   STS         MACH,R6
    000004AA 4621                   SHAR        R6
    000004AC 4621                   SHAR        R6
    000004AE 6063                   MOV         R6,R0
    000004B0 4004                   ROTL        R0
    000004B2 C901                   AND         #1,R0
    000004B4 360C                   ADD         R0,R6
    000004B6 0967                   MUL.L       R6,R9
    000004B8 021A                   STS         MACL,R2
    000004BA 3528                   SUB         R2,R5
            myaddin.c        154            food.y = rand() % HEIGHT;
    000004BC 4C0B                   JSR         @R12
    000004BE 2852                   MOV.L       R5,@R8     ; food.x
    000004C0 4011                   CMP/PZ      R0
    000004C2 8D21                   BT/S        L124
    000004C4 6603                   MOV         R0,R6
    000004C6 6067                   NOT         R6,R0
    000004C8 7001                   ADD         #1,R0
    000004CA C907                   AND         #7,R0
    000004CC 6607                   NOT         R0,R6
    000004CE A01D                   BRA         L125
    000004D0 7601                   ADD         #1,R6
    000004D2              L164:
    000004D2 00000002               .RES.W      1
    000004D4 <00000000>             .DATA.L     _snake_length
    000004D8 <00000000>             .DATA.L     _snake
    000004DC <00000000>             .DATA.L     _direction
    000004E0 <00000000>             .DATA.L     _food_exists
    000004E4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000004E8 <00000000>             .DATA.L     _locate
    000004EC <00000000>             .DATA.L     L168
    000004F0 <00000000>             .DATA.L     _Print
    000004F4 <00000000>             .DATA.L     _food
    000004F8 <00000000>             .DATA.L     L169
    000004FC <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000500 <00000000>             .DATA.L     _rand
    00000504 30C30C31               .DATA.L     H'30C30C31
    00000508              L124:
    00000508 E007                   MOV         #7,R0      ; H'00000007
    0000050A 2609                   AND         R0,R6
    0000050C              L125:
    0000050C D14D                   MOV.L       L165,R1    ; _snake_length
    0000050E 1861                   MOV.L       R6,@(4,R8) ; food.y
    00000510 6412                   MOV.L       @R1,R4     ; snake_length
            myaddin.c        155            for (i = 0; i < snake_length; ++i) {
    00000512 6743                   MOV         R4,R7
    00000514 77FF                   ADD         #-1,R7
    00000516 3477                   CMP/GT      R7,R4
    00000518 8F22                   BF/S        L127
    0000051A E500                   MOV         #0,R5      ; H'00000000
    0000051C 4715                   CMP/PL      R7
    0000051E 8B11                   BF          L129
    00000520 61B3                   MOV         R11,R1
    00000522 6E82                   MOV.L       @R8,R14    ; food.x
    00000524              L130:
    00000524 6212                   MOV.L       @R1,R2     ; snake[].x
    00000526 32E0                   CMP/EQ      R14,R2
    00000528 8B02                   BF          L132
    0000052A 5211                   MOV.L       @(4,R1),R2 ; snake[].y
    0000052C 3260                   CMP/EQ      R6,R2
    0000052E 89B7                   BT          L122
    00000530              L132:
            myaddin.c        156                if (snake[i].x == food.x && snake[i].y == food.y) {
    00000530 5212                   MOV.L       @(8,R1),R2 ; snake[].x
    00000532 32E0                   CMP/EQ      R14,R2
    00000534 8B02                   BF          L134
    00000536 5213                   MOV.L       @(12,R1),R2; snake[].y
    00000538 3260                   CMP/EQ      R6,R2
    0000053A 89B1                   BT          L122
    0000053C              L134:
    0000053C 7502                   ADD         #2,R5
    0000053E 3573                   CMP/GE      R7,R5
    00000540 8FF0                   BF/S        L130
    00000542 7110                   ADD         #16,R1
    00000544              L129:
    00000544 3543                   CMP/GE      R4,R5
    00000546 8918                   BT          L136
    00000548 4508                   SHLL2       R5
    0000054A 4500                   SHLL        R5
    0000054C 6053                   MOV         R5,R0
    0000054E 02BE                   MOV.L       @(R0,R11),R2; snake[].x
    00000550 6482                   MOV.L       @R8,R4     ; food.x
    00000552 3240                   CMP/EQ      R4,R2
    00000554 8B11                   BF          L136
    00000556 02DE                   MOV.L       @(R0,R13),R2; snake[].y
    00000558 3260                   CMP/EQ      R6,R2
    0000055A 89A1                   BT          L122
    0000055C A00D                   BRA         L136
    0000055E 0009                   NOP
    00000560              L127:
    00000560 4415                   CMP/PL      R4
    00000562 8B0A                   BF          L136
    00000564 65B3                   MOV         R11,R5
    00000566 6182                   MOV.L       @R8,R1     ; food.x
    00000568              L139:
    00000568 6252                   MOV.L       @R5,R2     ; snake[].x
    0000056A 3210                   CMP/EQ      R1,R2
    0000056C 8B02                   BF          L141
    0000056E 5251                   MOV.L       @(4,R5),R2 ; snake[].y
    00000570 3260                   CMP/EQ      R6,R2
    00000572 8995                   BT          L122
    00000574              L141:
    00000574 4410                   DT          R4
    00000576 8FF7                   BF/S        L139
    00000578 7508                   ADD         #8,R5
    0000057A              L136:
    0000057A D633                   MOV.L       L165+4,R6  ; _food_exists
            myaddin.c        157                    valid = 0;
            myaddin.c        158                    break;
            myaddin.c        159                }
            myaddin.c        160            }
            myaddin.c        161        } while (!valid);
            myaddin.c        162        food_exists = 1;
    0000057C E201                   MOV         #1,R2      ; H'00000001
    0000057E 2622                   MOV.L       R2,@R6     ; food_exists
    00000580 4F06                   LDS.L       @R15+,MACH
    00000582 4F16                   LDS.L       @R15+,MACL
    00000584 4F26                   LDS.L       @R15+,PR
    00000586 6EF6                   MOV.L       @R15+,R14
    00000588 6DF6                   MOV.L       @R15+,R13
    0000058A 6CF6                   MOV.L       @R15+,R12
    0000058C 6BF6                   MOV.L       @R15+,R11
    0000058E 6AF6                   MOV.L       @R15+,R10
    00000590 69F6                   MOV.L       @R15+,R9
            myaddin.c        163    }
    00000592 000B                   RTS
    00000594 68F6                   MOV.L       @R15+,R8
            myaddin.c        164    
            myaddin.c        165    int CheckCollision() {
    00000596              _CheckCollision:                 ; function: CheckCollision
                                                           ; frame size=4
    00000596 2FE6                   MOV.L       R14,@-R15
    00000598 D22A                   MOV.L       L165,R2    ; _snake_length
    0000059A 6722                   MOV.L       @R2,R7     ; snake_length
    0000059C 6473                   MOV         R7,R4
    0000059E 74FF                   ADD         #-1,R4
    000005A0 3747                   CMP/GT      R4,R7
    000005A2 8F25                   BF/S        L144
    000005A4 E501                   MOV         #1,R5      ; H'00000001
            myaddin.c        166        int i;
            myaddin.c        167        for (i = 1; i < snake_length; ++i) {
    000005A6 3457                   CMP/GT      R5,R4
    000005A8 8B12                   BF          L146
    000005AA D628                   MOV.L       L165+8,R6  ; _snake
    000005AC 6166                   MOV.L       @R6+,R1    ; snake[].x
    000005AE 6E66                   MOV.L       @R6+,R14   ; snake[].y
    000005B0              L147:
    000005B0 6262                   MOV.L       @R6,R2     ; snake[].x
    000005B2 3120                   CMP/EQ      R2,R1
    000005B4 8B02                   BF          L149
    000005B6 5261                   MOV.L       @(4,R6),R2 ; snake[].y
    000005B8 3E20                   CMP/EQ      R2,R14
    000005BA 892B                   BT          L150
    000005BC              L149:
            myaddin.c        168            if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) {
    000005BC 5262                   MOV.L       @(8,R6),R2 ; snake[].x
    000005BE 3120                   CMP/EQ      R2,R1
    000005C0 8B02                   BF          L152
    000005C2 5263                   MOV.L       @(12,R6),R2; snake[].y
    000005C4 3E20                   CMP/EQ      R2,R14
    000005C6 8925                   BT          L150
    000005C8              L152:
    000005C8 7502                   ADD         #2,R5
    000005CA 3543                   CMP/GE      R4,R5
    000005CC 8FF0                   BF/S        L147
    000005CE 7610                   ADD         #16,R6
    000005D0              L146:
    000005D0 3573                   CMP/GE      R7,R5
    000005D2 891C                   BT          L154
    000005D4 4508                   SHLL2       R5
    000005D6 D41D                   MOV.L       L165+8,R4  ; _snake
    000005D8 4500                   SHLL        R5
    000005DA 354C                   ADD         R4,R5
    000005DC 6642                   MOV.L       @R4,R6     ; snake[].x
    000005DE 6252                   MOV.L       @R5,R2     ; snake[].x
    000005E0 3620                   CMP/EQ      R2,R6
    000005E2 8B14                   BF          L154
    000005E4 5641                   MOV.L       @(4,R4),R6 ; snake[].y
    000005E6 5251                   MOV.L       @(4,R5),R2 ; snake[].y
    000005E8 3620                   CMP/EQ      R2,R6
    000005EA 8913                   BT          L150
    000005EC A00F                   BRA         L154
    000005EE 0009                   NOP
    000005F0              L144:
    000005F0 3757                   CMP/GT      R5,R7
    000005F2 8B0C                   BF          L154
    000005F4 D615                   MOV.L       L165+8,R6  ; _snake
    000005F6 6466                   MOV.L       @R6+,R4    ; snake[].x
    000005F8 6166                   MOV.L       @R6+,R1    ; snake[].y
    000005FA              L157:
    000005FA 6262                   MOV.L       @R6,R2     ; snake[].x
    000005FC 3420                   CMP/EQ      R2,R4
    000005FE 8B02                   BF          L159
    00000600 5261                   MOV.L       @(4,R6),R2 ; snake[].y
    00000602 3120                   CMP/EQ      R2,R1
    00000604 8906                   BT          L150
    00000606              L159:
    00000606 7501                   ADD         #1,R5
    00000608 3573                   CMP/GE      R7,R5
    0000060A 8FF6                   BF/S        L157
    0000060C 7608                   ADD         #8,R6
    0000060E              L154:
            myaddin.c        169                return 1;
            myaddin.c        170            }
            myaddin.c        171        }
            myaddin.c        172        return 0;
    0000060E E000                   MOV         #0,R0      ; H'00000000
    00000610 000B                   RTS
    00000612 6EF6                   MOV.L       @R15+,R14
    00000614              L150:
    00000614 E001                   MOV         #1,R0      ; H'00000001
    00000616 000B                   RTS
    00000618 6EF6                   MOV.L       @R15+,R14
            myaddin.c        173    }
            myaddin.c        174    
            myaddin.c        175    void GameOver() {
    0000061A              _GameOver:                       ; function: GameOver
                                                           ; frame size=4
    0000061A 4F22                   STS.L       PR,@-R15
            myaddin.c        176        Bdisp_AllClr_DDVRAM();
    0000061C D10C                   MOV.L       L165+12,R1 ; _Bdisp_AllClr_DDVRAM
    0000061E 410B                   JSR         @R1
    00000620 0009                   NOP
            myaddin.c        177        locate(5, 4);
    00000622 D60C                   MOV.L       L165+16,R6 ; _locate
    00000624 E504                   MOV         #4,R5      ; H'00000004
    00000626 460B                   JSR         @R6
    00000628 E405                   MOV         #5,R4      ; H'00000005
            myaddin.c        178        Print((unsigned char *)"Game Over");
    0000062A D40B                   MOV.L       L165+20,R4 ; L167
    0000062C D70B                   MOV.L       L165+24,R7 ; _Print
    0000062E 470B                   JSR         @R7
    00000630 0009                   NOP
            myaddin.c        179        Bdisp_PutDisp_DD();
    00000632 D10B                   MOV.L       L165+28,R1 ; _Bdisp_PutDisp_DD
    00000634 410B                   JSR         @R1
    00000636 0009                   NOP
    00000638 E408                   MOV         #8,R4      ; H'00000008
            myaddin.c        180        Sleep(2000);
    0000063A D20A                   MOV.L       L165+32,R2 ; _Sleep
    0000063C 4418                   SHLL8       R4
    0000063E 74D0                   ADD         #-48,R4
    00000640 422B                   JMP         @R2
    00000642 4F26                   LDS.L       @R15+,PR
    00000644              L165:
    00000644 <00000000>             .DATA.L     _snake_length
    00000648 <00000000>             .DATA.L     _food_exists
    0000064C <00000000>             .DATA.L     _snake
    00000650 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000654 <00000000>             .DATA.L     _locate
    00000658 <00000000>             .DATA.L     L167
    0000065C <00000000>             .DATA.L     _Print
    00000660 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000664 <00000000>             .DATA.L     _Sleep
            myaddin.c        181      
            myaddin.c        182       
            myaddin.c        183    }
            myaddin.c        184    
            myaddin.c        185    #pragma section _BR_Size
            myaddin.c        186    unsigned long BR_Size;
            myaddin.c        187    #pragma section
            myaddin.c        188    
            myaddin.c        189    #pragma section _TOP
            myaddin.c        190    int InitializeSystem(int isAppli, unsigned short OptionNum) {
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
    00000000 D601                   MOV.L       L166+2,R6  ; _INIT_ADDIN_APPLICATION
            myaddin.c        191        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000002 462B                   JMP         @R6
    00000004 655D                   EXTU.W      R5,R5
    00000006              L166:
    00000006 00000002               .RES.W      1
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
            myaddin.c        192    }
            myaddin.c        193    #pragma section
D   00000000              _snake_length:                   ; static: snake_length
    00000000 00000005               .DATA.L     H'00000005
    00000004              _direction:                      ; static: direction
    00000004 00000003               .DATA.L     H'00000003
    00000008              _food_exists:                    ; static: food_exists
    00000008 00000000               .DATA.L     H'00000000
C   00000000              L168:
    00000000 2A                     .SDATA      "*"
    00000001 00                     .DATA.B     H'00
    00000002 00                     .DATAB.B    2,0
    00000004              L169:
    00000004 23                     .SDATA      "#"
    00000005 00                     .DATA.B     H'00
    00000006 00                     .DATAB.B    2,0
    00000008              L167:
    00000008 47616D6520             .SDATA      "Game Over"
             4F766572     
    00000011 00                     .DATA.B     H'00
B   00000000              _snake:                          ; static: snake
    00000000 00000004               .RES.L      100
    00000190              _food:                           ; static: food
    00000190 00000004               .RES.L      2
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1
SH SERIES C/C++ Compiler (V.9.04.03.000)                                                         21-Jul-2024 14:15:10  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      193



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 00000668 Byte(s)
PROGRAM  SECTION (P_TOP):                             0000000C Byte(s)
CONSTANT SECTION (C):                                 00000012 Byte(s)
DATA     SECTION (D):                                 0000000C Byte(s)
BSS      SECTION (B):                                 00000198 Byte(s)
BSS      SECTION (B_BR_Size):                         00000004 Byte(s)

TOTAL PROGRAM  SECTION: 00000674 Byte(s)
TOTAL CONSTANT SECTION: 00000012 Byte(s)
TOTAL DATA     SECTION: 0000000C Byte(s)
TOTAL BSS      SECTION: 0000019C Byte(s)

    TOTAL PROGRAM SIZE: 0000082E Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            8
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          15
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            99



*** COMMAND PARAMETER ***

-subcommand=C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\hmk1DB.tmp
-cpu=sh3
-include="C:\Documents and Settings\Administrator\Desktop\fx-9860G SDK\OS\FX\include","C:\Documents and Settings\Administrator\Desktop\myaddin\myaddin"
-objectfile="C:\Documents and Settings\Administrator\Desktop\myaddin\myaddin\Debug\myaddin.obj"
-show=source
-listfile="C:\Documents and Settings\Administrator\Desktop\myaddin\myaddin\Debug\myaddin.lst"
-size
-inline
-chgincpath
-errorpath
"C:\Documents and Settings\Administrator\Desktop\myaddin\myaddin\myaddin.c"
-lang=c
-nologo
-speed
-debug
